// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module vadd2_compute_add_Pipeline_execute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_stream_din,
        out_stream_num_data_valid,
        out_stream_fifo_cap,
        out_stream_full_n,
        out_stream_write,
        in1_stream_dout,
        in1_stream_num_data_valid,
        in1_stream_fifo_cap,
        in1_stream_empty_n,
        in1_stream_read,
        in2_stream_dout,
        in2_stream_num_data_valid,
        in2_stream_fifo_cap,
        in2_stream_empty_n,
        in2_stream_read,
        size_load
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] out_stream_din;
input  [1:0] out_stream_num_data_valid;
input  [1:0] out_stream_fifo_cap;
input   out_stream_full_n;
output   out_stream_write;
input  [31:0] in1_stream_dout;
input  [1:0] in1_stream_num_data_valid;
input  [1:0] in1_stream_fifo_cap;
input   in1_stream_empty_n;
output   in1_stream_read;
input  [31:0] in2_stream_dout;
input  [1:0] in2_stream_num_data_valid;
input  [1:0] in2_stream_fifo_cap;
input   in2_stream_empty_n;
output   in2_stream_read;
input  [31:0] size_load;

reg ap_idle;
reg[31:0] out_stream_din;
reg out_stream_write;
reg in1_stream_read;
reg in2_stream_read;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg   [0:0] icmp_ln61_reg_150;
reg   [0:0] icmp_ln61_1_reg_154;
reg    ap_predicate_op35_read_state4;
reg    ap_predicate_op36_read_state4;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in1_stream_blk_n;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    in2_stream_blk_n;
reg    out_stream_blk_n;
reg   [31:0] reg_73;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] reg_77;
reg   [30:0] i_3_reg_145;
wire   [0:0] icmp_ln61_fu_100_p2;
wire   [0:0] icmp_ln61_1_fu_116_p2;
wire   [31:0] add_ln65_fu_122_p2;
reg   [31:0] add_ln65_reg_158;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [30:0] i_fu_44;
wire   [30:0] i_5_fu_128_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_3;
reg    ap_block_pp0_stage2_01001;
wire   [31:0] grp_fu_81_p2;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [31:0] i_cast_i_fu_96_p1;
wire   [30:0] i_4_fu_106_p2;
wire   [31:0] zext_ln61_fu_112_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage3) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_44 <= 31'd0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln61_1_reg_154 == 1'd1) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        i_fu_44 <= i_5_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln61_reg_150 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln65_reg_158 <= add_ln65_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_145 <= ap_sig_allocacmp_i_3;
        icmp_ln61_reg_150 <= icmp_ln61_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_fu_100_p2 == 1'd1))) begin
        icmp_ln61_1_reg_154 <= icmp_ln61_1_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_73 <= in1_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op36_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_77 <= in2_stream_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & ((icmp_ln61_1_reg_154 == 1'd0) | (icmp_ln61_reg_150 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_44;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in1_stream_blk_n = in1_stream_empty_n;
    end else begin
        in1_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        in1_stream_read = 1'b1;
    end else begin
        in1_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_predicate_op36_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in2_stream_blk_n = in2_stream_empty_n;
    end else begin
        in2_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op36_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        in2_stream_read = 1'b1;
    end else begin
        in2_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_stream_blk_n = out_stream_full_n;
    end else begin
        out_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_01001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        out_stream_din = grp_fu_81_p2;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_stream_din = add_ln65_reg_158;
    end else begin
        out_stream_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_reg_150 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        out_stream_write = 1'b1;
    end else begin
        out_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_fu_122_p2 = (in2_stream_dout + in1_stream_dout);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0) | (out_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0) | (out_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0) | (out_stream_full_n == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)))) | ((out_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)))) | ((out_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)))) | ((out_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op36_read_state4 == 1'b1) & (in2_stream_empty_n == 1'b0)) | ((ap_predicate_op35_read_state4 == 1'b1) & (in1_stream_empty_n == 1'b0)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op36_read_state4 == 1'b1) & (in2_stream_empty_n == 1'b0)) | ((ap_predicate_op35_read_state4 == 1'b1) & (in1_stream_empty_n == 1'b0)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op36_read_state4 == 1'b1) & (in2_stream_empty_n == 1'b0)) | ((ap_predicate_op35_read_state4 == 1'b1) & (in1_stream_empty_n == 1'b0)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (((in2_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((in1_stream_empty_n == 1'b0) & (icmp_ln61_reg_150 == 1'd1)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = (((ap_predicate_op36_read_state4 == 1'b1) & (in2_stream_empty_n == 1'b0)) | ((ap_predicate_op35_read_state4 == 1'b1) & (in1_stream_empty_n == 1'b0)) | ((icmp_ln61_reg_150 == 1'd1) & (out_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0) | (out_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = (out_stream_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln61_1_reg_154 == 1'd1) & (icmp_ln61_reg_150 == 1'd1));
end

always @ (*) begin
    ap_predicate_op36_read_state4 = ((icmp_ln61_1_reg_154 == 1'd1) & (icmp_ln61_reg_150 == 1'd1));
end

assign grp_fu_81_p2 = (reg_77 + reg_73);

assign i_4_fu_106_p2 = (ap_sig_allocacmp_i_3 | 31'd2);

assign i_5_fu_128_p2 = (i_3_reg_145 + 31'd4);

assign i_cast_i_fu_96_p1 = ap_sig_allocacmp_i_3;

assign icmp_ln61_1_fu_116_p2 = (($signed(zext_ln61_fu_112_p1) < $signed(size_load)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_100_p2 = (($signed(i_cast_i_fu_96_p1) < $signed(size_load)) ? 1'b1 : 1'b0);

assign zext_ln61_fu_112_p1 = i_4_fu_106_p2;

endmodule //vadd2_compute_add_Pipeline_execute
